{"version":3,"sources":["App.tsx","components/SearchInput/search-input.component.tsx","services/star-wars.service.ts","context/star-wars.context.ts","components/CharacterInfo/character-info.component.tsx","components/CharacterList/character-list.component.tsx","reportWebVitals.ts","index.tsx"],"names":["timeout","SearchInput","props","InputGroup","FormControl","placeholder","onChange","e","target","value","baseUrl","fetchStarWarsCharacters","page","query","fetch","then","data","json","catch","console","error","StarWarsContext","React","createContext","CharacterInfo","ctx","useContext","filmNames","useMemo","films","length","map","film","find","item","url","title","Card","className","Header","as","name","Body","ListGroup","Item","gender","height","mass","hair_color","skin_color","eye_color","birth_year","join","CharacterList","isLoading","Spinner","animation","variant","characters","character","Row","Col","lg","md","sm","App","useState","contextProps","setContextProps","activePage","setActivePage","setQuery","setIsLoading","fetchCharactersAndSetContext","searchQuery","count","results","finally","useEffect","paginationItems","pages","Math","ceil","items","i","push","Pagination","active","onClick","Provider","Container","event","undefined","clearTimeout","setTimeout","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3fd4849d.chunk.js","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport './App.css';\nimport { SearchInput } from './components/SearchInput/search-input.component';\nimport { Container, Row } from 'react-bootstrap';\nimport { fetchStarWarsCharacters, fetchStarWarsFilms } from './services/star-wars.service';\nimport StarWarsContext from './context/star-wars.context';\nimport { StarWarsContextProps } from './context/star-wars.context';\nimport { CharacterList } from './components/CharacterList/character-list.component';\nimport { Pagination } from 'react-bootstrap';\n\nlet timeout: NodeJS.Timeout;\n\nfunction App() {\n  const [contextProps, setContextProps] = useState<StarWarsContextProps>({} as StarWarsContextProps);\n  const [activePage, setActivePage] = useState(1);\n  const [query, setQuery] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchCharactersAndSetContext = (page: number, searchQuery: string): Promise<any> => {\n    setIsLoading(true);\n    return fetchStarWarsCharacters(page, searchQuery).then(data => {\n      setContextProps({\n        ...contextProps,\n        count: data.count,\n        characters: data.results,\n      });\n    })\n    .finally(() => { setIsLoading(false) });\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    fetchStarWarsCharacters(1, '').then((characters) => {\n      fetchStarWarsFilms().then((films) => {\n        setContextProps({\n          count: characters.count,\n          characters: characters.results,\n          films: films.results\n        });\n      });\n    })\n    .finally(() => { setIsLoading(false) });\n  }, []);\n\n  const paginationItems = useMemo(() => {\n    const { count } = contextProps;\n    const pages = Math.ceil(count / 10);\n    const items = [];\n\n    if (pages > 1) {\n      for (let i = 1; i <= pages; i ++) {\n        items.push(\n          <Pagination.Item key={i} active={activePage === i} onClick={() => {\n            if (activePage !== i) { \n              setActivePage(i);\n              fetchCharactersAndSetContext(i, query);\n            }\n          }}>\n            {i}\n          </Pagination.Item>,\n        )\n      }\n    }\n    \n    return items;\n  }, [contextProps.count, activePage]);\n\n  const handleSearch = (event: string) => {\n    setQuery(event);\n    setActivePage(1);\n    if (timeout !== undefined) clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      fetchCharactersAndSetContext(1, event);\n    }, 1000);\n  }\n\n  return (\n    <StarWarsContext.Provider value={contextProps}>\n      <div className='pt-5'>\n        <Container>\n          <Row className=\"mb-4\">\n            <h1 className=\"w-100 text-center\">Star wars characters loader</h1>\n          </Row>\n          <Row className=\"mb-4\">\n            <SearchInput onChange={handleSearch} />\n          </Row>\n          <Row className=\"d-flex justify-content-center\">\n            <CharacterList isLoading={isLoading} />\n          </Row>\n          <Row className=\"mb-4\">\n            {!isLoading && <Pagination>\n              {paginationItems}\n            </Pagination>}\n          </Row>\n        </Container>\n      </div>\n    </StarWarsContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\r\nimport { InputGroup, FormControl } from 'react-bootstrap';\r\n\r\ninterface Props {\r\n    onChange: (query: string) => void,\r\n}\r\n\r\nexport const SearchInput = (props: Props) => {\r\n    return (\r\n        <InputGroup>\r\n            <FormControl\r\n                placeholder=\"Start typing your favorite character name and we will upload details...\"\r\n                onChange={(e) => {\r\n                    props.onChange(e.target.value);\r\n                }}\r\n            />\r\n        </InputGroup>\r\n    )\r\n}","interface Response {\r\n    count: number;\r\n    results: any[];\r\n}\r\n\r\nconst baseUrl = 'https://swapi.dev/api/';\r\n\r\nexport const fetchStarWarsCharacters = (page: number, query: string = ''): Promise<Response> => {\r\n    return fetch(baseUrl + `people/?search=${query}&page=${page}`).then((data) => data.json()).catch((e) => console.error(e));\r\n}\r\n\r\nexport const fetchStarWarsFilms = (): Promise<Response> => {\r\n    return fetch(baseUrl + 'films/').then((data) => data.json()).catch((e) => console.error(e));\r\n}","import React from 'react';\r\nimport { IStarWarsCharacter, IStarWarsFilm } from '../models/star-wars.model';\r\n\r\nexport interface StarWarsContextProps {\r\n    count: number;\r\n    characters: IStarWarsCharacter[];\r\n    films: IStarWarsFilm[];\r\n}\r\n\r\nconst StarWarsContext = React.createContext<StarWarsContextProps>({} as StarWarsContextProps);\r\n\r\nexport default StarWarsContext;","import React, { useContext, useMemo } from 'react';\r\nimport { IStarWarsCharacter } from '../../models/star-wars.model';\r\nimport { Card, ListGroup } from 'react-bootstrap';\r\nimport StarWarsContext from '../../context/star-wars.context';\r\n\r\nexport const CharacterInfo = (props: IStarWarsCharacter) => {\r\n    const ctx = useContext(StarWarsContext);\r\n    const filmNames = useMemo(() => {\r\n        const films = ctx.films;\r\n\r\n        if (ctx.films.length) {\r\n            return props.films.map((film: string) => films.find((item) => item.url === film)?.title);\r\n        } \r\n        return [];\r\n    }, [props.films, ctx.films]);\r\n    \r\n    return (\r\n        <Card className=\"mb-3\">\r\n            <Card.Header as=\"h5\">{ props.name }</Card.Header>\r\n            <Card.Body>\r\n                <ListGroup>\r\n                    <ListGroup.Item>Gender: { props.gender }</ListGroup.Item>\r\n                    <ListGroup.Item>Height: { props.height }</ListGroup.Item>\r\n                    <ListGroup.Item>Weight: { props.mass }</ListGroup.Item>\r\n                    <ListGroup.Item>Hair color: { props.hair_color }</ListGroup.Item>\r\n                    <ListGroup.Item>Skin color: { props.skin_color }</ListGroup.Item>\r\n                    <ListGroup.Item>Eye color: { props.eye_color }</ListGroup.Item>\r\n                    <ListGroup.Item>Birth year: { props.birth_year }</ListGroup.Item>\r\n                    <ListGroup.Item>Films: { filmNames.join(', ') }</ListGroup.Item>\r\n                </ListGroup>\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}","import React, { useContext } from 'react';\r\nimport { Row, Col, Spinner } from 'react-bootstrap';\r\nimport StarWarsContext from '../../context/star-wars.context';\r\nimport { CharacterInfo } from '../CharacterInfo/character-info.component';\r\n\r\ninterface Props {\r\n    isLoading: boolean;\r\n}\r\n\r\nexport const CharacterList = (props: Props) => {\r\n    const ctx = useContext(StarWarsContext);\r\n\r\n    return (\r\n        <>\r\n            {props.isLoading \r\n            ? <Spinner animation=\"border\" variant=\"secondary\" /> \r\n            : (ctx?.characters?.map((character) => (\r\n                <Row key={character.url} className=\"w-100\">\r\n                    <Col lg={12} md={12} sm={12} >\r\n                        <CharacterInfo {...character}/>\r\n                    </Col>\r\n                </Row>\r\n            )))}\r\n        </>\r\n    )\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}